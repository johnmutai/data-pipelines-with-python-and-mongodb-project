# -*- coding: utf-8 -*-
"""Data Pipelines with Python and MongoDB Project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PUjl48HfL772LYQgqds_OCylL1enww6N
"""

!pip install pymongo

import pandas as pd
import pymongo
import logging

# Extraction function
def extract_data():
    # Load call log data from CSV file
    call_logs = pd.read_csv('call_logs.csv')

    # Load billing data from CSV file
    billing_data = pd.read_csv('billing_systems.csv')
    billing_data.rename(columns = {'transaction_id':'call_id'}, inplace = True)


    # Merge the two datasets based on common columns
    merged_data = pd.merge(call_logs, billing_data, on=['call_id'])

    # Convert call duration to minutes for easier analysis
    merged_data['duration_minutes'] = merged_data['call_duration'] / 60

    # Use Python logging module to log errors and activities
    logger = logging.getLogger(__name__)
    logger.info("Data extraction completed.")

    return merged_data


# Transformation function

def transform_data(df):
    # Data cleaning and handling missing values
    transformed_data = df

    # Group and aggregate the data
    df.describe()

    # Use Python logging module to log errors and activities
    logger = logging.getLogger(__name__)
    logger.info("Data transformation completed.")

    return transformed_data

# Loading function
def load_data(transformed_data):
    # Connect to MongoDB
    client = pymongo.MongoClient("mongodb+srv://johnmutai:GhWCpWvWBewuACWL@cluster0.3icyggq.mongodb.net/?retryWrites=true&w=majority")
    db = client["fraud_detection"]
    collection = db["call_records"]

    # Create indexes on the collection
    transformed_data.reset_index(inplace=True)
    data_dict = transformed_data.to_dict("records")
    collection.insert_one({"index":"call_id","data":data_dict})
    
    # Use Python logging module to log errors and activities
    logger = logging.getLogger(__name__)
    logger.info("Data loading completed.")

# Example usage
if __name__ == '__main__':
    file_path = 'call_logs.csv'
    data = extract_data()
    transformed_data = transform_data(data)
    load_data(transformed_data)